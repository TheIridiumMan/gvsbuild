on:
  push:
    branches: [main]
  pull_request:
  release:
    types: [published]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  python_version: '3.9.18'

name: CI

permissions:
  contents: read

jobs:

  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@91182cccc01eb5e619899d80e4e971d6181294a7 # v2.10.1
        with:
          egress-policy: audit

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up Python
        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
        with:
          python-version: ${{ env.python_version }}
      - name: Install uv
        uses: astral-sh/setup-uv@3b9817b1bf26186f03ab8277bab9b827ea5cc254 # v0.4.17
        with:
          enable-cache: true
          cache-dependency-glob: ".pre-commit-config.yaml"
      - name: Install pre-commit
        run: uv tool install pre-commit --with pre-commit-uv
      - name: Lint with pre-commit
        run: pre-commit run --show-diff-on-failure --color=always --all-files
      - name: Check uv lock file integrity
        run: uv lock --locked --offline

  test:
    needs: lint
    name: Test with Python ${{ matrix.python-version }}
    runs-on: windows-latest
    timeout-minutes: 60
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@91182cccc01eb5e619899d80e4e971d6181294a7 # v2.10.1
        with:
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Install uv
        uses: astral-sh/setup-uv@3b9817b1bf26186f03ab8277bab9b827ea5cc254 # v0.4.17
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      - name: Install the project
        run: uv sync
      - name: Install tox
        run: uv tool install tox --with tox-uv
      - name: Setup test suite
        run: tox run --notest --skip-missing-interpreters false
      - name: Run test suite
        run: tox run --skip-pkg-install

  build:
    needs: lint
    name: Build GTK${{ matrix.gtk-version }} Binaries
    runs-on: windows-2019
    permissions:
      contents: write
    timeout-minutes: 75
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    strategy:
      matrix:
        gtk-version: ['3', '4']
        architecture: ['x86', 'x64']  # Added architecture matrix

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@91182cccc01eb5e619899d80e4e971d6181294a7 # v2.10.1
        with:
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up Python
        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
        with:
          python-version: ${{ env.python_version }}
          architecture: ${{ matrix.architecture }}  # Set architecture
      - name: Install uv
        uses: astral-sh/setup-uv@3b9817b1bf26186f03ab8277bab9b827ea5cc254 # v0.4.17
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      - name: Seed pip
        run: uv venv --seed
      - name: Install the project
        run: uv sync --no-dev

      # Set 32-bit compilation flags
      - name: Configure 32-bit environment
        if: matrix.architecture == 'x86'
        run: |
          set VSCMD_ARG_TGT_ARCH=x86
          setenv /x86
          
      - name: Build GTK3
        if: matrix.gtk-version == '3'
        run: >
          uv run gvsbuild build --ninja-opts -j2 --enable-gi --py-wheel gtk3 gtksourceview4 graphene pygobject
          adwaita-icon-theme glib-networking
      - name: Build GTK4
        if: matrix.gtk-version == '4'
        run: > # Use -j2 option to prevent out of memory errors with GitHub Action runners
          uv run gvsbuild build --ninja-opts -j2 --enable-gi --py-wheel gtk4 libadwaita gtksourceview5 pygobject
          adwaita-icon-theme gtkmm

      # Copy the build artifacts based on architecture
      - name: Copy wheel files
        run: |
          New-Item "C:\gtk-build\gtk\${{ matrix.architecture }}\release\wheels" -ItemType "directory"
          Copy-Item (Resolve-Path C:\gtk-build\build\${{ matrix.architecture }}\release\pygobject\dist\PyGObject*.whl) "C:\gtk-build\gtk\${{ matrix.architecture }}\release\wheels"
          Copy-Item (Resolve-Path C:\gtk-build\build\${{ matrix.architecture }}\release\pycairo\dist\pycairo*.whl) "C:\gtk-build\gtk\${{ matrix.architecture }}\release\wheels"
      - name: Archive GTK runtime
        run: 7z a -tzip GTK${{ matrix.gtk-version }}_Gvsbuild_${{ github.sha }}_${{ matrix.architecture }}.zip C:\gtk-build\gtk\${{ matrix.architecture }}\release\*
      - name: Upload GTK${{ matrix.gtk-version }}_Gvsbuild-${{ github.sha }}_${{ matrix.architecture }}.zip
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: GTK${{ matrix.gtk-version }}_Gvsbuild_${{ github.sha }}_${{ matrix.architecture }}.zip
          path: GTK${{ matrix.gtk-version }}_Gvsbuild_${{ github.sha }}_${{ matrix.architecture }}.zip
